import cv2
import numpy as np
import os
import time
import pickle

def live_aruco_detection(calibration_data):
    """
    실시간으로 비디오를 받아 ArUco 마커를 검출하고 3D 포즈를 추정하는 함수
    
    Args:
        calibration_data: 카메라 캘리브레이션 데이터를 포함한 딕셔너리
            - camera_matrix: 카메라 내부 파라미터 행렬
            - dist_coeffs: 왜곡 계수
    """
    # 캘리브레이션 데이터 추출
    camera_matrix = calibration_data['camera_matrix']
    dist_coeffs = calibration_data['dist_coeffs']
    
    # ArUco 검출기 설정
    aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_250)
    aruco_params = cv2.aruco.DetectorParameters()
    detector = cv2.aruco.ArucoDetector(aruco_dict, aruco_params)
    
    # 마커 크기 및 3D 좌표 설정 (밀리미터 단위)
    marker_size = 50  # 35mm
    marker_3d_edges = np.array([
        [0, 0, 0],
        [0, marker_size, 0],
        [marker_size, marker_size, 0],
        [marker_size, 0, 0]
    ], dtype='float32').reshape((4, 1, 3))
    
    # 색상 정의
    blue_BGR = (255, 0, 0)
    
    # 카메라 설정
    cap = cv2.VideoCapture(0)
    
    # 카메라 초기화 대기
    time.sleep(2)
    
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame")
            break
            
        # 이미지 왜곡 보정
        frame_undistorted = cv2.undistort(frame, camera_matrix, dist_coeffs)
        
        # 마커 검출
        corners, ids, rejected = detector.detectMarkers(frame_undistorted)
        
        # 마커가 검출되면 표시 및 포즈 추정
        if corners:
            for corner in corners:
                # 코너 포인트 추출 및 표시
                corner = np.array(corner).reshape((4, 2))
                (topLeft, topRight, bottomRight, bottomLeft) = corner
                
                # 코너 포인트 좌표 변환
                topRightPoint = (int(topRight[0]), int(topRight[1]))
                topLeftPoint = (int(topLeft[0]), int(topLeft[1]))
                bottomRightPoint = (int(bottomRight[0]), int(bottomRight[1]))
                bottomLeftPoint = (int(bottomLeft[0]), int(bottomLeft[1]))
                
                # 코너 포인트 표시
                cv2.circle(frame_undistorted, topLeftPoint, 4, blue_BGR, -1)
                cv2.circle(frame_undistorted, topRightPoint, 4, blue_BGR, -1)
                cv2.circle(frame_undistorted, bottomRightPoint, 4, blue_BGR, -1)
                cv2.circle(frame_undistorted, bottomLeftPoint, 4, blue_BGR, -1)
                
                # PnP로 포즈 추정
                ret, rvec, tvec = cv2.solvePnP(
                    marker_3d_edges, 
                    corner, 
                    camera_matrix, 
                    dist_coeffs
                )
                
                if ret:
                    # 위치 및 회전 정보 계산
                    x = round(tvec[0][0], 2)
                    y = round(tvec[1][0], 2)
                    z = round(tvec[2][0], 2)
                    rx = round(np.rad2deg(rvec[0][0]), 2)
                    ry = round(np.rad2deg(rvec[1][0]), 2)
                    rz = round(np.rad2deg(rvec[2][0]), 2)
                    
                    # 위치 및 회전 정보 표시
                    pos_text = f"Pos: ({x}, {y}, {z})mm"
                    rot_text = f"Rot: ({rx}, {ry}, {rz})deg"
                    
                    cv2.putText(frame_undistorted, 
                              pos_text,
                              (int(topLeft[0]-10), int(topLeft[1]+10)),
                              cv2.FONT_HERSHEY_SIMPLEX,
                              0.5, (0, 0, 255), 2)
                              
                    cv2.putText(frame_undistorted,
                              rot_text,
                              (int(topLeft[0]-10), int(topLeft[1]+40)),
                              cv2.FONT_HERSHEY_SIMPLEX,
                              0.5, (0, 0, 255), 2)
                    
                    # 좌표축 표시
                    cv2.drawFrameAxes(frame_undistorted, camera_matrix, dist_coeffs,
                                    rvec, tvec, marker_size/2)
        
        # 프레임 표시
        cv2.imshow('ArUco Marker Detection', frame_undistorted)
        
        # 'q' 키를 누르면 종료
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # 리소스 해제
    cap.release()
    cv2.destroyAllWindows()

def main():
    # 캘리브레이션 데이터 로드
    try:
        with open('camera_calibration.pkl', 'rb') as f:
            calibration_data = pickle.load(f)
        print("Calibration data loaded successfully")
    except FileNotFoundError:
        print("Error: Camera calibration file not found")
        return
    except Exception as e:
        print(f"Error loading calibration data: {e}")
        return
    
    print("Starting ArUco marker detection...")
    live_aruco_detection(calibration_data)

if __name__ == "__main__":
    main()
