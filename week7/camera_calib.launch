#1
<launch>
  <node pkg="usb_cam" type="usb_cam_node" name="usb_cam" output="screen">
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam" />
  </node>

  <node pkg="image_view" type="image_view" name="image_view" output="screen">
    <remap from="image" to="/usb_cam/image_raw" />
  </node>
</launch>

#2. 체커보드 이미지 수집
- 위의 launch 파일 실행 후 rqt_image_view 또는 image_view로 이미지 확인
- 적절한 거리에서 체커보드를 다양한 각도로 촬영 (총 15장 이상 추천)
rosrun image_view image_saver _filename_format:=calib_images/img%03d.jpg

#3. make_list.txt 생성
./calib_images/img001.jpg
./calib_images/img002.jpg
./calib_images/img003.jpg
...

#4. solve_pnp.py – 내부 & 외부 파라미터 계산
#!/usr/bin/env python3
import cv2
import numpy as np
import glob

# 체커보드 크기 (내부 코너 수)
CHECKERBOARD = (8, 6)

# 3D 점 초기화
objp = np.zeros((CHECKERBOARD[0]*CHECKERBOARD[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)

# 저장할 포인트
objpoints = []
imgpoints = []

images = glob.glob('./calib_images/*.jpg')
for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, None)
    if ret:
        objpoints.append(objp)
        imgpoints.append(corners)
        cv2.drawChessboardCorners(img, CHECKERBOARD, corners, ret)
        cv2.imshow('img', img)
        cv2.waitKey(100)

cv2.destroyAllWindows()

# 내부 파라미터 계산
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)
print("▶ 내부 파라미터 (Camera Matrix):\n", mtx)
print("▶ 왜곡 계수 (Distortion Coefficients):\n", dist)

# 하나의 이미지로 Pose 추정
img = cv2.imread(images[0])
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, None)

if ret:
    _, rvec, tvec = cv2.solvePnP(objp, corners, mtx, dist)
    R, _ = cv2.Rodrigues(rvec)
    print("▶ 회전 행렬 R:\n", R)
    print("▶ 이동 벡터 t:\n", tvec)

#5 실행 순서
cd ~/camera_calib_pnp_ws
catkin_make
source devel/setup.bash

# 1. 카메라 실행 및 이미지 저장
roslaunch camera_pose_pkg camera_calib.launch

# 2. 이미지 저장 후 make_list.txt 생성
ls ./calib_images/*.jpg > make_list.txt

# 3. solvePnP로 내부 & 외부 파라미터 계산
rosrun camera_pose_pkg solve_pnp.py
